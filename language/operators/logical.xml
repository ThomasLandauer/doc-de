<?xml version="1.0" encoding="utf-8"?>
<!-- EN-Revision: 43d07782b514d0c7a8487f2c74063739f302df8d Maintainer: nobody Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: e4b889a3e8b9d87ab605aac9bbe85d2c16c69a1b Reviewer: samesch -->
<!-- CREDITS: tzwenny, betz -->
<sect1 xml:id="language.operators.logical">
 <title>Logische Operatoren</title>
 <titleabbrev>Logik</titleabbrev>
 <table>
  <title>Logische Operatoren</title>
  <tgroup cols="3">
   <thead>
    <row>
     <entry>Beispiel</entry>
     <entry>Name</entry>
     <entry>Ergebnis</entry>
    </row>
   </thead>
   <tbody>
    <row>
     <entry>$a and $b</entry>
     <entry>Und</entry>
     <entry>
      &true; wenn sowohl <varname>$a</varname> als auch <varname>$b</varname>
      &true; ist.
     </entry>
    </row>
    <row>
     <entry>$a or $b</entry>
     <entry>Oder</entry>
     <entry>
      &true; wenn <varname>$a</varname> oder <varname>$b</varname> &true; ist.
     </entry>
    </row>
    <row>
     <entry>$a xor $b</entry>
     <entry>Entweder Oder</entry>
     <entry>
      &true; wenn entweder <varname>$a</varname> oder <varname>$b</varname>
      &true; ist, aber nicht beide.
     </entry>
    </row>
    <row>
     <entry>! $a</entry>
     <entry>Nicht</entry>
     <entry>&true; wenn <varname>$a</varname> nicht &true; ist.</entry>
    </row>
    <row>
     <entry>$a &amp;&amp; $b</entry>
     <entry>Und</entry>
     <entry>
      &true; wenn sowohl <varname>$a</varname> als auch <varname>$b</varname>
      &true; ist.
     </entry>
    </row>
    <row>
     <entry>$a || $b</entry>
     <entry>Oder</entry>
     <entry>
      &true; wenn <varname>$a</varname> oder <varname>$b</varname> &true;
      ist.
     </entry>
    </row>
   </tbody>
  </tgroup>
 </table>
 <simpara>
  Der Grund dafür, dass es je zwei unterschiedliche Operatoren für die "Und"-
  und die "Oder"-Verknüpfung gibt, ist der, dass die beiden Operatoren
  unterschiedliche Rangfolgen haben. (siehe auch
  <link linkend="language.operators.precedence">Operator-Rangfolge</link>.)
 </simpara>
 <example>
  <title>Logische Operatoren erklärt</title>
  <programlisting role="php">
<![CDATA[
<?php

// --------------------
// foo() wird nie aufgerufen werden, da die Operatoren Kurzschlussauswertung verwenden

$a = (false && foo());
$b = (true  || foo());
$c = (false and foo());
$d = (true  or  foo());

// --------------------
// "||" hat eine höhere Rangfolge als "or"

// Das Ergebnis des Ausdrucks (false || true) wird $e zugewiesen
// Funktioniert wie: ($e = (false || true))
$e = false || true;

// Die Konstante "false" wird $f zugewiesen bevor die "or" Operation
// durchgeführt wird
// Funktioniert wie: (($e = false) or true)
$f = false or true;

var_dump($e, $f);

// --------------------
// "&&" hat eine höhere Rangfolge als "and"

// Das Ergebnis des Ausdrucks (true && false) wird $g zugewiesen
// Funktioniert wie: ($g = (true && false))
$g = true && false;

// Die Konstante "true" wird $h zugewiesen bevor die "and" Operation
// durchgeführt wird
// Funktioniert wie: (($h = true) and false)
$h = true and false;

var_dump($g, $h);
?>
]]>
  </programlisting>
  &example.outputs.similar;
  <screen>
<![CDATA[
bool(true)
bool(false)
bool(false)
bool(true)
]]>
  </screen>
 </example>
</sect1>
