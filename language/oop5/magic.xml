<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 5e15a6c3e4d5819102361ae78e73c90a06238c8a Maintainer: simp Status: ready -->
<!-- Reviewed: yes -->
<!-- Rev-Revision: 0eda461b7a8d5035cebf6cecba26f206a929058f Reviewer: samesch -->
 <sect1 xml:id="language.oop5.magic" xmlns="http://docbook.org/ns/docbook">
  <title>Magische Methoden</title>
  <para>
   Magische Methoden sind Methoden, die PHPs Standardverhalten überschreiben,
   wenn bestimmte Aktionen mit einem Objekt durchgeführt werden.
  </para>
  <caution>
   <simpara>
    Alle Methodennamen, die mit <literal>__</literal> beginnen, sind durch
    PHP reserviert. Es wird daher nicht empfohlen solche Methodennamen zu
    verwenden, außer wenn das Verhalten von PHP überschrieben werden soll.
   </simpara>
  </caution>
  <para>
   Die folgenden Methodennamen werden als magisch betrachtet:
   <!-- Should be an itemized list ? -->
   <link linkend="object.construct">__construct()</link>,
   <link linkend="object.destruct">__destruct()</link>,
   <link linkend="object.call">__call()</link>,
   <link linkend="object.callstatic">__callStatic()</link>,
   <link linkend="object.get">__get()</link>,
   <link linkend="object.set">__set()</link>,
   <link linkend="object.isset">__isset()</link>,
   <link linkend="object.unset">__unset()</link>,
   <link linkend="object.sleep">__sleep()</link>,
   <link linkend="object.wakeup">__wakeup()</link>,
   <link linkend="object.serialize">__serialize()</link>,
   <link linkend="object.unserialize">__unserialize()</link>,
   <link linkend="object.tostring">__toString()</link>,
   <link linkend="object.invoke">__invoke()</link>,
   <link linkend="object.set-state">__set_state()</link>,
   <link linkend="object.clone">__clone()</link> und
   <link linkend="object.debuginfo">__debugInfo()</link>.
  </para>
  <warning>
   <!-- See for a code example of this behaviour: https://3v4l.org/Bov34 -->
   <simpara>
    Mit Ausnahme von
    <link linkend="object.construct">__construct()</link>,
    <link linkend="object.destruct">__destruct()</link> und
    <link linkend="object.clone">__clone()</link> <emphasis>müssen</emphasis>
    alle magischen Methoden als <literal>public</literal> deklariert werden,
    andernfalls wird eine <constant>E_WARNING</constant> ausgegeben.
    Vor PHP 8.0.0 wurde für die magischen Methoden
    <link linkend="object.sleep">__sleep()</link>,
    <link linkend="object.wakeup">__wakeup()</link>,
    <link linkend="object.serialize">__serialize()</link>,
    <link linkend="object.unserialize">__unserialize()</link> und
    <link linkend="object.set-state">__set_state()</link> keine Diagnose
    ausgegeben.
   </simpara>
  </warning>
  <warning>
   <para>
    Falls Typdeklarationen in der Definition der magischen Methoden angegeben
    werden, müssen diese identisch zu den Signaturen sein, die in diesem
    Dokument beschrieben werden, andernfalls wird ein fataler Fehler
    hervorgerufen. Vor PHP 8.0.0 wurde keine Diagnose ausgegeben. Allerdings
    dürfen <link linkend="object.construct">__construct()</link> und
    <link linkend="object.destruct">__destruct()</link> keinen Rückgabetyp
    deklarieren, sonst wird ein fataler Fehler ausgegeben.
   </para>
  </warning>

  <sect2 xml:id="language.oop5.magic.sleep">
   <title>
    <link linkend="object.sleep">__sleep()</link> und
    <link linkend="object.wakeup">__wakeup()</link>
   </title>

   <methodsynopsis xml:id="object.sleep">
    <modifier>public</modifier> <type>array</type><methodname>__sleep</methodname>
    <void/>
   </methodsynopsis>
   <methodsynopsis xml:id="object.wakeup">
    <modifier>public</modifier> <type>void</type><methodname>__wakeup</methodname>
    <void/>
   </methodsynopsis>

   <para>
    <function>serialize</function> prüft, ob die Klasse eine Funktion mit dem
    magischen Namen <link linkend="object.sleep">__sleep()</link> besitzt.
    Wenn dem so ist, wird die Funktion vor jeder Serialisierung ausgeführt.
    Sie kann das Objekt aufräumen und es wird von ihr erwartet, dass sie ein
    Array mit den Namen aller Variablen zurückgibt, die serialisiert werden
    sollen. Wenn die Methode nichts zurückgibt, wird &null; serialisiert und
    eine <constant>E_NOTICE</constant> ausgegeben.
   </para>
   <note>
    <para>
     <link linkend="object.sleep">__sleep()</link> kann keine Namen von
     privaten Eigenschaften in Elternklassen zurückgeben. Dies würde zu einem
     Fehler der Stufe <constant>E_NOTICE</constant> führen. Stattdessen sollte
     das <classname>Serializable</classname>-Interface verwendet werden.
    </para>
   </note>
   <note>
    <para>
     Seit PHP 8.0.0 erzeugt die Rückgabe eines Wertes von
     <link linkend="object.sleep">__sleep()</link>, der kein Array ist, eine
     Warnung; vorher führte dies zu einem Hinweis.
    </para>
   </note>
   <para>
    Der Zweck von von <link linkend="object.sleep">__sleep()</link> ist, nicht
    gespeicherte Daten zu sichern oder ähnliche Aufräumarbeiten zu erledigen.
    Die Funktion ist ebenfalls nützlich, wenn ein sehr großes Objekt nicht
    komplett gespeichert werden muss.
   </para>
   <para>
    Umgekehrt überprüft <function>unserialize</function>, ob eine Funktion mit
    dem magischen Namen <link linkend="object.wakeup">__wakeup()</link>
    vorhanden ist. Falls vorhanden, kann diese Funktion alle Ressourcen, die
    das Objekt möglicherweise hat, wiederherstellen.
   </para>
   <para>
    Der Zweck von <link linkend="object.wakeup">__wakeup()</link> ist es, alle
    Datenbankverbindungen, die bei der Serialisierung verlorengegangen sind,
    wiederherzustellen und andere Aufgaben der erneuten Initialisierung
    durchzuführen.
   </para>
  <example>
   <title>Sleep- und Wakeup-Beispiel</title>
   <programlisting role="php">
<![CDATA[
<?php
class Connection
{
    protected $link;
    private $dsn, $username, $password;

    public function __construct($dsn, $username, $password)
    {
        $this->dsn = $dsn;
        $this->username = $username;
        $this->password = $password;
        $this->connect();
    }

    private function connect()
    {
        $this->link = new PDO($this->dsn, $this->username, $this->password);
    }

    public function __sleep()
    {
        return array('dsn', 'username', 'password');
    }

    public function __wakeup()
    {
        $this->connect();
    }
}?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.serialize">
   <title>
    <link linkend="object.serialize">__serialize()</link> und
    <link linkend="object.unserialize">__unserialize()</link>
   </title>

   <methodsynopsis xml:id="object.serialize">
    <modifier>public</modifier> <type>array</type><methodname>__serialize</methodname>
    <void/>
   </methodsynopsis>
   <methodsynopsis xml:id="object.unserialize">
    <modifier>public</modifier> <type>void</type><methodname>__unserialize</methodname>
    <methodparam><type>array</type><parameter>data</parameter></methodparam>
   </methodsynopsis>

   <para>
    <function>serialize</function> prüft, ob die Klasse eine Funktion mit dem
    magischen Namen <link linkend="object.serialize">__serialize()</link>
    besitzt. Wenn dem so ist, wird die Funktion vor jeder Serialisierung
    ausgeführt. Sie muss ein assoziatives Array von Schlüssel/Wert-Paaren
    erzeugen und zurückgeben, die die serialisierte Form des Objekts
    darstellen. Wird kein Array zurückgegeben, wird ein
    <classname>TypeError</classname> geworfen.
   </para>
   <note>
    <para>
     Sind sowohl <link linkend="object.serialize">__serialize()</link> als
     auch <link linkend="object.sleep">__sleep()</link> im selben Objekt
     definiert, wird nur <link linkend="object.serialize">__serialize()</link>
     aufgerufen. <link linkend="object.sleep">__sleep()</link> wird ignoriert.
     Implementiert das Objekt das
     <link linkend="class.serializable">Serializable</link>-Interface, wird
     die <literal>serialize()</literal>-Methode des Interfaces ignoriert und
     stattdessen <link linkend="object.serialize">__serialize()</link> verwendet.
    </para>
   </note>
   <para>
    Der Zweck von <link linkend="object.serialize">__serialize()</link> ist,
    eine für die Serialisierung geeignete beliebige Darstellung eines Objekts
    zu definieren. Die Elemente des Arrays können den Eigenschaften des
    Objekts entsprechen, aber das ist nicht erforderlich.
   </para>
   <para>
    Umgekehrt überprüft <function>unserialize</function>, ob eine Funktion mit
    dem magischen Namen
    <link linkend="object.unserialize">__unserialize()</link> vorhanden ist.
    Falls vorhanden, wird dieser Funktion das wiederhergestellte Array
    übergeben, das von <link linkend="object.serialize">__serialize()</link>
    zurückgegeben wurde. Sie kann dann gegebenenfalls die Eigenschaften des
    Objekts aus diesem Array wiederherstellen.
   </para>
   <note>
    <para>
     Sind sowohl <link linkend="object.unserialize">__unserialize()</link> als
     auch <link linkend="object.wakeup">__wakeup()</link> im selben Objekt
     definiert, wird nur
     <link linkend="object.unserialize">__unserialize()</link> aufgerufen.
     <link linkend="object.wakeup">__wakeup()</link> wird ignoriert.
    </para>
   </note>
   <note>
    <para>
     Dieses Feature ist seit PHP 7.4.0 verfügbar.
    </para>
   </note>
   <example>
    <title>Serialize und unserialize</title>
    <programlisting role="php">
<![CDATA[
<?php
class Connection
{
    protected $link;
    private $dsn, $username, $password;

    public function __construct($dsn, $username, $password)
    {
        $this->dsn = $dsn;
        $this->username = $username;
        $this->password = $password;
        $this->connect();
    }

    private function connect()
    {
        $this->link = new PDO($this->dsn, $this->username, $this->password);
    }

    public function __serialize(): array
    {
        return [
          'dsn' => $this->dsn,
          'user' => $this->username,
          'pass' => $this->password,
        ];
    }

    public function __unserialize(array $data): void
    {
        $this->dsn = $data['dsn'];
        $this->username = $data['user'];
        $this->password = $data['pass'];

        $this->connect();
    }
}?>
]]>
    </programlisting>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.tostring">
   <title><link linkend="object.tostring">__toString()</link></title>
   <methodsynopsis xml:id="object.tostring">
    <modifier>public</modifier> <type>string</type><methodname>__toString</methodname>
    <void/>
   </methodsynopsis>
   <para>
    Mit der Methode <link linkend="object.tostring">__toString()</link> kann
    eine Klasse entscheiden, wie sie reagieren soll, wenn sie wie eine
    Zeichenkette behandelt wird. Die beeinflusst beispielsweise, was
    <literal>echo $obj;</literal> ausgeben wird.
   </para>
   <warning>
    <para>
     Seit PHP 8.0.0 unterliegt der Rückgabewert dieser Methode der üblichen
     PHP-Semantik für Typen. Das heißt, er bei deaktivierter
     <link linkend="language.types.declarations.strict">strikter Typisierung</link>
     nach Möglichkeit in einen <type>String</type> umgewandelt.
    </para>
    <para>
     Wenn die
     <link linkend="language.types.declarations.strict">Strikte Typisierung</link>
     aktiviert ist, wird ein <interfacename>Stringable</interfacename>-Objekt
     von einer <type>string</type>-Typdeklaration <emphasis>nicht</emphasis>
     akzeptiert. Wenn ein solches Verhalten erwünscht ist, muss die
     Typdeklaration <interfacename>Stringable</interfacename> und
     <type>string</type> mittels Union-Typ akzeptieren.
    </para>
    <para>
     Seit PHP 8.0.0 implementiert jede Klasse, die eine
     <link linkend="object.tostring">__toString()</link>-Methode enthält,
     implizit auch das Interface <interfacename>Stringable</interfacename> und
     erfüllt daher auch Typprüfungen auf dieses Interface. Es wird dennoch
     empfohlen, dieses Interface explizit zu implementieren.
    </para>
    <para>
     In PHP 7.4 <emphasis>muss</emphasis> der Rückgabewert ein Wert vom Typ
     <type>string</type> sein, andernfalls wird ein
     <classname>Error</classname> geworfen.
    </para>
    <para>
     Vor PHP 7.4.0 <emphasis>muss</emphasis> der Rückgabewert ein Wert vom Typ
     <type>string</type> sein, ansonsten wird ein Fehler der Stufe
     <constant>E_RECOVERABLE_ERROR</constant> hervorgerufen.
    </para>
   </warning>
   <warning>
    <simpara>
     Es war vor PHP 7.4.0 nicht möglich eine Exception aus einer
     <link linkend="object.tostring">__toString()</link>-Methode zu werfen.
     Dies resultierte in einem fatalen Fehler.
    </simpara>
   </warning>
   <example>
    <title>Einfaches Beispiel</title>
    <programlisting role="php">
<![CDATA[
<?php
// Deklariere eine einfache Klasse
class TestClass
{
    public $foo;

    public function __construct($foo)
    {
        $this->foo = $foo;
    }

    public function __toString()
    {
        return $this->foo;
    }
}

$class = new TestClass('Hallo');
echo $class;
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Hallo
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.invoke">
   <title><link linkend="object.invoke">__invoke()</link></title>
   <methodsynopsis xml:id="object.invoke">
    <type>mixed</type><methodname>__invoke</methodname>
    <methodparam rep="repeat"><parameter>values</parameter></methodparam>
   </methodsynopsis>
   <para>
    Die Methode <link linkend="object.invoke">__invoke()</link> wird
    aufgerufen, wenn ein Skript versucht, ein Objekt als Funktion aufzurufen.
   </para>
   <example>
    <title>Nutzung von <link linkend="object.invoke">__invoke()</link></title>
    <programlisting role="php">
<![CDATA[
<?php
class CallableClass
{
    public function __invoke($x)
    {
        var_dump($x);
    }
}
$obj = new CallableClass;
$obj(5);
var_dump(is_callable($obj));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
int(5)
bool(true)
]]>
    </screen>
   </example>
   <example>
    <title>Nutzung von <link linkend="object.invoke">__invoke()</link></title>
    <programlisting role="php">
<![CDATA[
<?php
class Sort
{
    private $key;

    public function __construct(string $key)
    {
        $this->key = $key;
    }

    public function __invoke(array $a, array $b): int
    {
        return $a[$this->key] <=> $b[$this->key];
    }
}

$customers = [
    ['id' => 1, 'first_name' => 'John', 'last_name' => 'Do'],
    ['id' => 3, 'first_name' => 'Alice', 'last_name' => 'Gustav'],
    ['id' => 2, 'first_name' => 'Bob', 'last_name' => 'Filipe']
];

// Kunden nach Vornamen sortieren
usort($customers, new Sort('first_name'));
print_r($customers);

// Kunden nach Nachnamen sortieren
usort($customers, new Sort('last_name'));
print_r($customers);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
Array
(
    [0] => Array
        (
            [id] => 3
            [first_name] => Alice
            [last_name] => Gustav
        )

    [1] => Array
        (
            [id] => 2
            [first_name] => Bob
            [last_name] => Filipe
        )

    [2] => Array
        (
            [id] => 1
            [first_name] => John
            [last_name] => Do
        )

)
Array
(
    [0] => Array
        (
            [id] => 1
            [first_name] => John
            [last_name] => Do
        )

    [1] => Array
        (
            [id] => 2
            [first_name] => Bob
            [last_name] => Filipe
        )

    [2] => Array
        (
            [id] => 3
            [first_name] => Alice
            [last_name] => Gustav
        )

)
]]>
    </screen>
   </example>
  </sect2>

  <sect2 xml:id="language.oop5.magic.set-state">
   <title><link linkend="object.set-state">__set_state()</link></title>
   <methodsynopsis xml:id="object.set-state">
    <modifier>static</modifier> <type>object</type><methodname>__set_state</methodname>
    <methodparam><type>array</type><parameter>properties</parameter></methodparam>
   </methodsynopsis>
   <para>
    Diese <link linkend="language.oop5.static">statische</link> Methode wird
    für Klassen aufgerufen, die mittels <function>var_export</function>
    exportiert werden.
   </para>
   <para>
    Der einzige Parameter dieser Methode ist ein Array, welches aus
    exportierten Eigenschaften der Form <literal>['Eigenschaft' => Wert,
    ...]</literal> besteht.
   </para>
   <example>
    <title>Verwendung von <link linkend="object.set-state">__set_state()</link></title>
    <programlisting role="php">
<![CDATA[
<?php

class A
{
    public $var1;
    public $var2;

    public static function __set_state($an_array)
    {
        $obj = new A;
        $obj->var1 = $an_array['var1'];
        $obj->var2 = $an_array['var2'];
        return $obj;
    }
}

$a = new A;
$a->var1 = 5;
$a->var2 = 'foo';

$b = var_export($a, true);
var_dump($b);
eval('$c = ' . $b . ';');
var_dump($c);
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
string(60) "A::__set_state(array(
   'var1' => 5,
   'var2' => 'foo',
))"
object(A)#2 (2) {
  ["var1"]=>
  int(5)
  ["var2"]=>
  string(3) "foo"
}
]]>
    </screen>
   </example>
   <note>
    <simpara>
     Wenn ein Objekt exportiert wird, überprüft
     <function>var_export</function> nicht, ob
     <link linkend="object.set-state">__set_state()</link> von der
     Objektklasse implementiert wird, sodass der erneute Import von Objekten
     zu einer <classname>Error</classname>-Exception führt, falls
     __set_state() nicht implementiert ist. Die betrifft insbesondere einige
     interne Klassen.
    </simpara>
    <simpara>
     Es liegt im Aufgabenbereich des Programmiers, sicherzustellen, dass nur
     Objekte wieder re-importiert werden, welche auch __set_state()
     implementieren.
    </simpara>
   </note>
  </sect2>

  <sect2 xml:id="language.oop5.magic.debuginfo">
   <title><link linkend="object.debuginfo">__debugInfo()</link></title>
   <methodsynopsis xml:id="object.debuginfo">
    <type>array</type><methodname>__debugInfo</methodname>
    <void/>
   </methodsynopsis>
   <para>
    Diese Methode wird von <function>var_dump</function> aufgerufen, wenn
    ein Objekt ausgegeben wird, um die Eigenschaften auszulesen die gezeigt
    werden sollen. Wenn diese Methode in einem Objekt nicht definiert ist,
    so werden alle Eigenschaften angezeigt, die public, protected oder private
    sind.
   </para>
   <example>
    <title>Verwendung von <link linkend="object.debuginfo">__debugInfo()</link></title>
    <programlisting role="php">
<![CDATA[
<?php
class C {
    private $prop;

    public function __construct($val) {
        $this->prop = $val;
    }

    public function __debugInfo() {
        return [
            'propSquared' => $this->prop ** 2,
        ];
    }
}

var_dump(new C(42));
?>
]]>
    </programlisting>
    &example.outputs;
    <screen>
<![CDATA[
object(C)#1 (1) {
  ["propSquared"]=>
  int(1764)
}
]]>
    </screen>
   </example>
  </sect2>
 </sect1>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
