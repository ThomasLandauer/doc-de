<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 8b4c3d8dc5e190fbd5d84eede38a4da13537043d Maintainer: samesch Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="datetimeimmutable.construct" xmlns="http://docbook.org/ns/docbook" xmlns:xlink="http://www.w3.org/1999/xlink">
 <refnamediv>
  <refname>DateTimeImmutable::__construct</refname>
  <refname>date_create_immutable</refname>
  <refpurpose>Liefert ein neues DateTimeImmutable-Objekt</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <para>&style.oop;</para>
  <constructorsynopsis role="DateTimeImmutable">
   <modifier>public</modifier> <methodname>DateTimeImmutable::__construct</methodname>
   <methodparam choice="opt"><type>string</type><parameter>datetime</parameter><initializer>"now"</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>DateTimeZone</type><type>null</type></type><parameter>timezone</parameter><initializer>&null;</initializer></methodparam>
  </constructorsynopsis>
  <para>&style.procedural;</para>
  <methodsynopsis>
   <type class="union"><type>DateTimeImmutable</type><type>false</type></type><methodname>date_create_immutable</methodname>
   <methodparam choice="opt"><type>string</type><parameter>datetime</parameter><initializer>"now"</initializer></methodparam>
   <methodparam choice="opt"><type class="union"><type>DateTimeZone</type><type>null</type></type><parameter>timezone</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Gibt ein neues DateTimeImmutable-Objekt zurück.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <variablelist>
   <varlistentry>
    <term><parameter>datetime</parameter></term>
    <listitem>
     <para>&date.formats.parameter;</para>
     <para>
      Wenn der Parameter <parameter>$timezone</parameter> verwendet wird, kann
      hier mit der Übergabe von <literal>"now"</literal> die aktuelle Zeit
      ermittelt werden.
     </para>
    </listitem>
   </varlistentry>
   <varlistentry>
    <term><parameter>timezone</parameter></term>
    <listitem>
     <para>
      Ein <classname>DateTimeZone</classname>-Objekt, das die Zeitzone von
      <parameter>$datetime</parameter> darstellt.
     </para>
     <para>
      Wenn <parameter>$timezone</parameter> nicht übergeben wird oder &null;
      ist, wird die aktuelle Zeitzone verwendet.
     </para>
     <note>
      <para>
       Der Parameter <parameter>$timezone</parameter> und die aktuelle
       Zeitzone werden ignoriert, wenn der Parameter
       <parameter>$datetime</parameter> entweder ein UNIX-Zeitstempel ist
       (&zb; <literal>@946684800</literal>) oder eine Zeitzone vorgibt (&zb;
       <literal>2010-01-28T15:00:00+02:00</literal> oder
       <literal>2010-07-05T06:00:00Z</literal>).
      </para>
     </note>
    </listitem>
   </varlistentry>
  </variablelist>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   Gibt eine neue DateTimeImmutable-Instanz zurück.
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  <para>
   Wenn eine ungültige Datum/Uhrzeit-Zeichenkette übergeben wird, wird eine
   <exceptionname>DateMalformedStringException</exceptionname> geworfen. Vor
   PHP 8.3 wird eine <exceptionname>Exception</exceptionname> geworfen.
  </para>
 </refsect1>

 <refsect1 role="changelog">
  &reftitle.changelog;
  <para>
   <informaltable>
    <tgroup cols="2">
     <thead>
      <row>
       <entry>&Version;</entry>
       <entry>&Description;</entry>
      </row>
     </thead>
     <tbody>
      <row>
       <entry>8.3.0</entry>
       <entry>
        Wirft nun eine
        <exceptionname>DateMalformedStringException</exceptionname> anstelle
        von <exceptionname>Exception</exceptionname>, wenn eine ungültige
        Zeichenkette übergeben wird.
       </entry>
      </row>
      <row>
       <entry>7.1.0</entry>
       <entry>
        Von nun an werden die Mikrosekunden mit dem aktuellen Wert belegt,
        nicht mit '00000'.
       </entry>
      </row>
     </tbody>
    </tgroup>
   </informaltable>
  </para>
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title><function>DateTimeImmutable::__construct</function>-Beispiel</title>
   <para>&style.oop;</para>
   <programlisting role="php">
<![CDATA[
<?php
try {
    $date = new DateTimeImmutable('2000-01-01');
} catch (Exception $e) {
    echo $e->getMessage();
    exit(1);
}

echo $date->format('Y-m-d');
?>
]]>
   </programlisting>
   <para>&style.procedural;</para>
   <programlisting role="php">
<![CDATA[
<?php
$date = date_create('2000-01-01');
if (!$date) {
    $e = date_get_last_errors();
    foreach ($e['errors'] as $error) {
        echo "$error\n";
    }
    exit(1);
}

echo date_format($date, 'Y-m-d');
?>
]]>
   </programlisting>
   &examples.outputs;
   <screen>
<![CDATA[
2000-01-01
]]>
   </screen>
  </example>
  <example>
   <title>Die Besonderheiten von <function>DateTimeImmutable::__construct</function></title>
   <programlisting role="php">
<![CDATA[
<?php
// Datums- und Zeitangaben in der Zeitzone des Computers.
$date = new DateTimeImmutable('2000-01-01');
echo $date->format('Y-m-d H:i:sP') . "\n";

// Datums- und Zeitangaben in der angegebenen Zeitzone.
$date = new DateTimeImmutable('2000-01-01', new DateTimeZone('Pacific/Nauru'));
echo $date->format('Y-m-d H:i:sP') . "\n";

// Aktuelles Datum und aktuelle Uhrzeit in der Zeitzone des Computers.
$date = new DateTimeImmutable();
echo $date->format('Y-m-d H:i:sP') . "\n";

// Aktuelles Datum und aktuelle Uhrzeit in der angegebenen Zeitzone.
$date = new DateTimeImmutable('now', new DateTimeZone('Pacific/Nauru'));
echo $date->format('Y-m-d H:i:sP') . "\n";

// Verwendung eines UNIX-Zeitstempels. Zu beachten ist,
// dass das Ergebnis in der Zeitzone UTC liegt.
$date = new DateTimeImmutable('@946684800');
echo $date->format('Y-m-d H:i:sP') . "\n";

// Nicht vorhandene Werte werden fortgeschrieben.
$date = new DateTimeImmutable('2000-02-30');
echo $date->format('Y-m-d H:i:sP') . "\n";
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
2000-01-01 00:00:00-05:00
2000-01-01 00:00:00+12:00
2010-04-24 10:24:16-04:00
2010-04-25 02:24:16+12:00
2000-01-01 00:00:00+00:00
2000-03-01 00:00:00-05:00
]]>
   </screen>
  </example>

  <example>
   <title>Ändern der zugehörigen Zeitzone</title>
   <programlisting role="php">
<![CDATA[
<?php
$timeZone = new \DateTimeZone('Asia/Tokyo');

$time = new \DateTimeImmutable();
$time = $time->setTimezone($timeZone);

echo $time->format('Y/m/d H:i:s'), "\n";
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
2022/08/12 23:49:23
]]>
   </screen>
  </example>

  <example>
   <title>Verwenden einer Zeichenkette mit relativen Datums- und Zeitangaben</title>
   <programlisting role="php">
<![CDATA[
<?php
$time = new \DateTimeImmutable("-1 year");

echo $time->format('Y/m/d H:i:s'), "\n";
?>
]]>
   </programlisting>
   &example.outputs.similar;
   <screen>
<![CDATA[
2021/08/12 15:43:51
]]>
   </screen>
  </example>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
