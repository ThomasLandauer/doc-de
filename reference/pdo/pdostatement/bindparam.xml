<?xml version="1.0" encoding="utf-8"?>
<!-- $Revision$ -->
<!-- EN-Revision: 28529d3539b850e870e3aa97570f4db0e53daa03 Maintainer: samesch Status: ready -->
<!-- Reviewed: no -->
<refentry xml:id="pdostatement.bindparam" xmlns="http://docbook.org/ns/docbook">
 <refnamediv>
  <refname>PDOStatement::bindParam</refname>
  <refpurpose>Bindet einen Parameter an den angegebenen Variablennamen</refpurpose>
 </refnamediv>

 <refsect1 role="description">
  &reftitle.description;
  <methodsynopsis role="PDOStatement">
   <modifier>public</modifier> <type>bool</type><methodname>PDOStatement::bindParam</methodname>
   <methodparam><type class="union"><type>string</type><type>int</type></type><parameter>param</parameter></methodparam>
   <methodparam><type>mixed</type><parameter role="reference">var</parameter></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>type</parameter><initializer>PDO::PARAM_STR</initializer></methodparam>
   <methodparam choice="opt"><type>int</type><parameter>maxLength</parameter><initializer>0</initializer></methodparam>
   <methodparam choice="opt"><type>mixed</type><parameter>driverOptions</parameter><initializer>&null;</initializer></methodparam>
  </methodsynopsis>
  <para>
   Bindet eine PHP-Variable an den entsprechenden benannten oder durch ein
   Fragezeichen gekennzeichneten Platzhalter der vorbereiteten SQL-Anweisung.
   Im Gegensatz zu <methodname>PDOStatement::bindValue</methodname> wird die
   Variable als Referenz gebunden und wird erst ausgewertet, wenn
   <methodname>PDOStatement::execute</methodname> aufgerufen wird.
  </para>
  <para>
   Meistens handelt es sich bei den Parametern um Eingabeparameter, &dh; um
   Parameter, die nur lesend verwendet werden, um die Abfrage zu erstellen
   (sie können aber dennoch nach <parameter>type</parameter> umgewandelt
   werden). Einige Treiber ermöglichen jedoch die Ausführung gespeicherter
   Prozeduren, die Daten über Ausgabeparameter zurückgeben können. Solche
   Parameter werden häufig gleichzeitig als Ein- und Ausgabeparameter
   verwendet, die sowohl Daten senden als auch aktualisiert werden, um sie zu
   empfangen.
  </para>
 </refsect1>

 <refsect1 role="parameters">
  &reftitle.parameters;
  <para>
   <variablelist>
    <varlistentry>
     <term><parameter>param</parameter></term>
      <listitem>
       <para>
        Der Bezeichner des Parameters. Bei einer vorbereiteten Anweisung, die
        benannte Platzhalter verwendet, ist dies ein Parametername der Form
        <varname>:name</varname>. Bei einer vorbereiteten Anweisung mit
        Fragezeichen-Platzhaltern ist dies die Position des Parameters,
        beginnend mit 1 (1-indiziert).
       </para>
      </listitem>
     </varlistentry>
    <varlistentry>
     <term><parameter>var</parameter></term>
      <listitem>
       <para>
        Der Name der PHP-Variable, die an den Parameter der SQL-Anweisung
        gebunden werden soll.
       </para>
      </listitem>
     </varlistentry>
    <varlistentry>
     <term><parameter>type</parameter></term>
      <listitem>
       <para>
        Ein expliziter Datentyp für den Parameter, der durch eine der
        <link linkend="pdo.constants"><literal>PDO::PARAM_*</literal>-Konstanten</link>
        angegeben wird. Soll ein INOUT-Parameter von einer gespeicherten
        Prozedur zurückgegeben werden, muss der bitweise OR-Operator verwendet
        werden, um die <constant>PDO::PARAM_INPUT_OUTPUT</constant>-Bits für
        den Parameter <parameter>type</parameter> zu setzen.
       </para>
      </listitem>
     </varlistentry>
    <varlistentry>
     <term><parameter>maxLength</parameter></term>
      <listitem>
       <para>
        Die Länge des Datentyps. Um anzuzeigen, dass ein Parameter ein
        OUT-Parameter einer gespeicherten Prozedur ist, muss die Länge
        explizit angegeben werden; nur sinnvoll, wenn der Parameter
        <parameter>type</parameter>
        <constant>PDO::PARAM_INPUT_OUTPUT</constant> ist.
       </para>
      </listitem>
     </varlistentry>
    <varlistentry>
     <term><parameter>driverOptions</parameter></term>
     <listitem>
      <para>

      </para>
     </listitem>
    </varlistentry>
   </variablelist>
  </para>
 </refsect1>

 <refsect1 role="returnvalues">
  &reftitle.returnvalues;
  <para>
   &return.success;
  </para>
 </refsect1>

 <refsect1 role="errors">
  &reftitle.errors;
  &pdo.errors;
 </refsect1>

 <refsect1 role="examples">
  &reftitle.examples;
  <example>
   <title>Ausführen einer vorbereiteten Anweisung mit benannten Platzhaltern</title>
   <programlisting role="php">
<![CDATA[
<?php
/* Ausführen einer vorbereiteten Anweisung durch Binden von PHP-Variablen */
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour');
$sth->bindParam('calories', $calories, PDO::PARAM_INT);
/* Den Namen kann auch ein Doppelpunkt ":" vorangestellt werden (optional) */
$sth->bindParam(':colour', $colour, PDO::PARAM_STR);
$sth->execute();
?>
]]>
   </programlisting>
  </example>
  <example>
   <title>Ausführen einer vorbereiteten Anweisung mit Fragezeichen-Platzhaltern</title>
   <programlisting role="php">
<![CDATA[
<?php
/* Ausführen einer vorbereiteten Anweisung durch Binden von PHP-Variablen */
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < ? AND colour = ?');
$sth->bindParam(1, $calories, PDO::PARAM_INT);
$sth->bindParam(2, $colour, PDO::PARAM_STR);
$sth->execute();
?>
]]>
   </programlisting>
  </example>

<!--
  <example><title>Pass a NULL value into a prepared statement</title>
   <programlisting role="php">
<![CDATA[
<?php
/* Execute a prepared statement by binding PHP variables */
$calories = 150;
$colour = 'red';
$sth = $dbh->prepare('SELECT name, colour, calories
    FROM fruit
    WHERE calories < :calories AND colour = :colour');
$sth->bindParam(':calories', $calories, PDO::PARAM_INT);

/* Find fruit with a NULL value in the colour column */
$sth->bindParam(':colour', $colour, PDO::PARAM_NULL);

$sth->execute();
?>
]]>
   </programlisting>
  </example>
-->
  <example>
   <title>Aufrufen einer gespeicherten Prozedur mit einem INOUT-Parameter</title>
   <programlisting role="php">
<![CDATA[
<?php
/* Aufrufen einer gespeicherten Prozedur mit einem INOUT-Parameter */
$colour = 'rot';
$sth = $dbh->prepare('CALL puree_fruit(?)');
$sth->bindParam(1, $colour, PDO::PARAM_STR|PDO::PARAM_INPUT_OUTPUT, 12);
$sth->execute();
print "Nach dem Pürieren der Früchte, ist die Farbe: $colour";
?>
]]>
   </programlisting>
  </example>
 </refsect1>

 <refsect1 role="seealso">
  &reftitle.seealso;
  <para>
   <simplelist>
    <member><methodname>PDO::prepare</methodname></member>
    <member><methodname>PDOStatement::execute</methodname></member>
    <member><methodname>PDOStatement::bindValue</methodname></member>
   </simplelist>
  </para>
 </refsect1>

</refentry>
<!-- Keep this comment at the end of the file
Local variables:
mode: sgml
sgml-omittag:t
sgml-shorttag:t
sgml-minimize-attributes:nil
sgml-always-quote-attributes:t
sgml-indent-step:1
sgml-indent-data:t
indent-tabs-mode:nil
sgml-parent-document:nil
sgml-default-dtd-file:"~/.phpdoc/manual.ced"
sgml-exposed-tags:nil
sgml-local-catalogs:nil
sgml-local-ecat-files:nil
End:
vim600: syn=xml fen fdm=syntax fdl=2 si
vim: et tw=78 syn=sgml
vi: ts=1 sw=1
-->
